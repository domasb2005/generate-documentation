import React, { useMemo } from 'react';
import PropTypes from 'prop-types';
import { useLayeringContext, LayeringContextValue, LayeringContext } from './parts/layering-context.js';

function LayeringProvider(_ref) {
  let {
    baseLayer,
    children
  } = _ref;
  const {
    popupZIndex,
    dropdownZIndex,
    tooltipZIndex,
    baseZIndex,
    isInPortal
  } = useLayeringContext();
  const contextValue = useMemo(() => {
    switch (baseLayer) {
      case 'popup':
        return new LayeringContextValue(popupZIndex, true);

      case 'dropdown':
        return new LayeringContextValue(dropdownZIndex, true);

      case 'tooltip':
        return new LayeringContextValue(tooltipZIndex, true);

      default:
        return new LayeringContextValue(baseZIndex, isInPortal);
    }
  }, [baseLayer, baseZIndex, dropdownZIndex, isInPortal, popupZIndex, tooltipZIndex]);
  return /*#__PURE__*/React.createElement(LayeringContext.Provider, {
    value: contextValue
  }, children);
}

LayeringProvider.propTypes = {
  baseLayer: PropTypes.oneOf(['popup', 'dropdown', 'tooltip']),
  children: PropTypes.node
};
export { LayeringProvider as default };
