import React, { ForwardRefExoticComponent, PropsWithoutRef, RefAttributes } from 'react';
export declare type Theme = 'light' | 'dark';
declare type ThemeContextValue = {
    theme: Theme;
    noProvider?: boolean;
};
export declare const ThemeContext: React.Context<ThemeContextValue>;
export declare const ThemeConsumer: React.Consumer<ThemeContextValue>;
export declare const getInverseTheme: (theme: Theme) => Theme;
/**
 * @deprecated please support --rs-theme-dark and --rs-theme-flip css variables and don't use react context for theme
 * If you need to maintain backward compatibility use `useThemeWithUndefined` hook instead, rely on --rs-theme-dark and --rs-theme-flip css variables when theme is undefined
 * */
export declare const useTheme: (overwriteValue?: Theme) => Theme;
export declare const useThemeWithUndefined: (overwriteValue?: Theme) => Theme | undefined;
export interface ThemeProps {
    theme?: Theme;
}
/**
 * @deprecated please support --rs-theme-dark and --rs-theme-flip css variables and don't use react context for theme
 * If you need to maintain backward compatibility use `useThemeWithUndefined` hook instead, rely on --rs-theme-dark and --rs-theme-flip css variables when theme is undefined
 * */
export declare const withTheme: <P extends ThemeProps = ThemeProps>(wrappedComponent: React.ComponentType<P>) => React.ForwardRefExoticComponent<React.PropsWithoutRef<P> & React.RefAttributes<unknown>>;
export {};
