import React, { createContext, useContext } from 'react';
const LAYER_STEP = 500;

class LayeringContextValue {
  baseZIndex;
  isInPortal;
  popupZIndex;
  dropdownZIndex;
  tooltipZIndex;

  constructor(baseZIndex, isInPortal) {
    Object.defineProperty(this, 'baseZIndex', {
      writable: false,
      enumerable: true,
      value: baseZIndex
    });
    Object.defineProperty(this, 'isInPortal', {
      writable: false,
      enumerable: true,
      value: Boolean(isInPortal)
    });
    Object.defineProperty(this, 'popupZIndex', {
      enumerable: true,
      get: () => this.baseZIndex + 3 * LAYER_STEP
    });
    Object.defineProperty(this, 'dropdownZIndex', {
      enumerable: true,
      get: () => this.baseZIndex + 2 * LAYER_STEP
    });
    Object.defineProperty(this, 'tooltipZIndex', {
      enumerable: true,
      get: () => this.baseZIndex + LAYER_STEP
    });
  }

}

const LayeringContext = /*#__PURE__*/createContext(new LayeringContextValue(0));
const LayeringConsumer = LayeringContext.Consumer;

const useLayeringContext = () => useContext(LayeringContext);
/**
 * @deprecated use `useLayeringContext` hook instead
 * */


const withLayering = WrappedComponent => {
  const component = props => /*#__PURE__*/React.createElement(LayeringContext.Consumer, null, layering => /*#__PURE__*/React.createElement(WrappedComponent, { ...layering,
    ...props
  }));

  component.displayName = `WithLayering(${WrappedComponent.displayName || WrappedComponent.name})`;
  return component;
};

export { LayeringConsumer, LayeringContext, LayeringContextValue, useLayeringContext, withLayering };
