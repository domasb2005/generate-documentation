import React, { createContext, useContext } from 'react';
const ThemeContext = /*#__PURE__*/createContext({
  theme: 'light',
  noProvider: true
});
const ThemeConsumer = ThemeContext.Consumer;

const getInverseTheme = theme => theme === 'light' ? 'dark' : 'light';
/**
 * @deprecated please support --rs-theme-dark and --rs-theme-flip css variables and don't use react context for theme
 * If you need to maintain backward compatibility use `useThemeWithUndefined` hook instead, rely on --rs-theme-dark and --rs-theme-flip css variables when theme is undefined
 * */


const useTheme = overwriteValue => {
  const {
    theme
  } = useContext(ThemeContext);
  return overwriteValue || theme;
};

const useThemeWithUndefined = overwriteValue => {
  const {
    theme,
    noProvider
  } = useContext(ThemeContext);
  return overwriteValue || (noProvider ? undefined : theme);
};
/**
 * @deprecated please support --rs-theme-dark and --rs-theme-flip css variables and don't use react context for theme
 * If you need to maintain backward compatibility use `useThemeWithUndefined` hook instead, rely on --rs-theme-dark and --rs-theme-flip css variables when theme is undefined
 * */


const withTheme = wrappedComponent => {
  const WrappedComponent = wrappedComponent;
  const ComponentWithTheme = /*#__PURE__*/React.forwardRef((_ref, ref) => {
    let {
      theme,
      ...restProps
    } = _ref;
    return /*#__PURE__*/React.createElement(ThemeConsumer, null, _ref2 => {
      let {
        theme: themeFromContext
      } = _ref2;
      return /*#__PURE__*/React.createElement(WrappedComponent, {
        ref: ref,
        theme: theme || themeFromContext,
        ...restProps
      });
    });
  });
  ComponentWithTheme.displayName = `WithTheme(${WrappedComponent.displayName || WrappedComponent.name})`;
  return ComponentWithTheme;
};

export { ThemeConsumer, ThemeContext, getInverseTheme, useTheme, useThemeWithUndefined, withTheme };
