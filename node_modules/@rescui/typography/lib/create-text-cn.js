import _includesInstanceProperty from "@babel/runtime-corejs3/core-js-stable/instance/includes";
import { useThemeWithUndefined } from '@rescui/ui-contexts';
import cn from 'classnames';
import styles from './index-moduled.p.module.css.js';
const TEXT_BASES = ['rs-digits-1', 'rs-digits-2', 'rs-super-hero', 'rs-middle-hero', 'rs-hero', 'rs-subtitle-1', 'rs-subtitle-2', 'rs-h1', 'rs-h2', 'rs-h3', 'rs-h4', 'rs-h5', 'rs-overline', 'rs-text-1', 'rs-text-2', 'rs-text-3'];

function createTextCn(theme) {
  // eslint-disable-next-line complexity
  function textCn() {
    let type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'rs-text-1';
    let {
      paragraphOffsetAuto = false,
      hardness = undefined,
      external = false,
      mode = 'classic',
      alpha = undefined,
      offsetItems = undefined
    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (type === 'rs-digits') {
      // eslint-disable-next-line no-param-reassign
      type = 'rs-digits-1';
      console.warn(`'rs-digits' style is deprecated, please use 'rs-digits-1' instead`);
    }

    if (_includesInstanceProperty(TEXT_BASES).call(TEXT_BASES, type)) {
      return cn(styles[type], theme && styles[`rs-typography_theme_${theme}`], styles[`rs-text_hardness_${hardness ?? 'auto'}`], paragraphOffsetAuto && styles['rs-text_paragraph-offset-auto']);
    }

    if (type === 'rs-link') {
      return cn(styles[type], styles[`rs-link_mode_${mode}`], hardness && styles[`rs-link_hardness_${hardness}`], external && styles[`rs-link_external`], theme && styles[`rs-typography_theme_${theme}`]);
    }

    if (type === 'rs-ul' || type === 'rs-ol') {
      return cn(styles[type], alpha && styles[`rs-ol_alpha_${alpha}`], offsetItems && styles[`${type}_offset-items_${offsetItems}`]);
    }

    return cn(styles[type], theme && styles[`rs-typography_theme_${theme}`]);
  }

  return textCn;
}

const textCn = createTextCn();

const useTextStyles = () => createTextCn(useThemeWithUndefined());

const colorCn = color => styles[`rs-text_color_${color}`];

export { colorCn, createTextCn, textCn, useTextStyles };
